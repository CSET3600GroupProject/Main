package grouponecommandline;

import java.util.*;
import java.io.*;

public class GroupOneCommandLine
{
    public static void main(String[] args) throws IOException
    {
        // Variable Declarations
        boolean exitProgram = false;
        String userChoice;
        Scanner input = new Scanner(System. in );
        List vmList = new ArrayList();
        List hubList = new ArrayList();
        int vmIndex = -1;
        int hubIndex = -1;

        // Announce the Program.
        System.out.print("Welcome to the Group 1 Command Line Project.");
        
        // Loop to stay inside the program.
        while (exitProgram == false)
        {
            // Give the user choices to run through the program.
            System.out.print("\n\nPlease select an option from the below list.");
            System.out.print("\n1 - Add a new VM");
            System.out.print("\n2 - Add a new Hub");
            System.out.print("\n3 - View a Device");
            System.out.print("\n4 - Edit a Device");
            System.out.print("\n5 - Delete a Device");
            System.out.print("\n6 - Connect a VM to Hubs");
            System.out.print("\n7 - Save the Current Config File");
            System.out.print("\n8 - Load a Config File");
            System.out.print("\n9 - Delete Entire Network");
            System.out.print("\n10 - Exit");

            // Print out current VMs in the vmList.
            System.out.print("\n\nCurrent VMs: ");
            for(int i = 0; i < vmList.size(); i++)
            {
                VM currentVM = (VM)vmList.get(i);
                System.out.print(currentVM.getVMname() + ", ");
            }
            
            // Print out current Hubs in the hubList.
            System.out.print("\nCurrent Hubs: ");
            for(int i = 0; i < hubList.size(); i++)
            {
                Hub currentHub = (Hub)hubList.get(i);
                System.out.print(currentHub.getHubName() + ", ");
            }
                        
            System.out.print("\n\n");
            userChoice = input.nextLine();

            // Takes in user's choice and runs the following function.
            switch(userChoice)
            {
                default: System.out.print("Incorrect Response. Please Try Again. \n");
                    break;
                case "1":
                    AddNewVM(vmList, hubList, vmIndex, hubIndex);
                    break;
                case "2":
                    AddNewHub(vmList, hubList, vmIndex, hubIndex);
                    break;
                case "3":
                    ViewDevice(vmList, hubList, vmIndex, hubIndex);
                    break;
                case "4":
                    EditDevice(vmList, hubList, vmIndex, hubIndex);
                    break;
                case "5":
                    DeleteDevice(vmList, hubList, vmIndex, hubIndex);
                    break;
                case "6":
                    ConnectDevices(vmList, hubList, vmIndex, hubIndex);
                    break;
                case "7":
                    SaveConfigFile(vmList, hubList, vmIndex, hubIndex);
                    break;
                case "8":
                    //LoadConfigFile(vmList, hubList, vmIndex, hubIndex);
                    break;
                case "9":
                    DeleteNetwork(vmList, hubList, vmIndex, hubIndex);
                    break;
                case "10":
                    exitProgram = true;
                    break;
            }
        }
    }
    
    public static void AddNewVM(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        // Variable Declaration
        Scanner input = new Scanner(System.in );
        String userInput;
        Boolean duplicateVMname = true;
        Boolean duplicateHubName = true;
        VM newVM = new VM();
        VM currentVM = new VM();
        Hub currentHub = new Hub();
        
        if(vmList.isEmpty())
        {
            duplicateVMname = false;
        }
        
        if(hubList.isEmpty())
        {
            duplicateHubName = false;
        }
        
        // Add the newly created VM to the VM List.
        vmList.add(newVM);
        
        // Get the size of vmList and apply it to vmIndex.
        vmIndex = vmList.size() - 1;
        
        System.out.print("\nPlease enter the name of the new VM: ");
        userInput = input.nextLine();
        
        // Checks to see if the requested name already exists in vmList or hubList.
        // If it does, keep asking until receiving a new, unique name.
        while(duplicateVMname == true || duplicateHubName == true)
        {
            // Check to see if the requested name exists as a VM.
            for(int i = 0; i < vmList.size(); i++)
            {
                currentVM = (VM)vmList.get(i);
                
                if(userInput.equals(currentVM.getVMname()))
                {
                    duplicateVMname = true;
                    i = vmList.size() + 1;
                }
                else
                {
                    duplicateVMname = false;
                }
            }
            // Check to see if the requested name exists as a Hub.
            for(int i = 0; i < hubList.size(); i++)
            {
                currentHub = (Hub)hubList.get(i);
                
                if(userInput.equals(currentHub.getHubName()))
                {
                    duplicateHubName = true;
                    i = hubList.size() + 1;
                }
                else
                {
                    duplicateHubName = false;
                }
            }
            if(duplicateVMname == true || duplicateHubName == true)
            {
                System.out.print("The device, " + userInput + " already exists as a VM or a Hub.");
                System.out.print("\n\nPlease enter a UNIQUE name for the new VM: ");
                userInput = input.nextLine();
            }           
        }
        
        // Add the name of the new VM object to the list.
        currentVM.setVMname(userInput);
                
        // Takes in the desired OS the user would like for the VM.
        System.out.print("Please enter an OS for the VM: ");
        userInput = input.nextLine();
        currentVM.setVMos(userInput);
        
        // Takes in the desired OS Version the user would like for the VM.
        System.out.print("Please enter a version for the VM: ");
        userInput = input.nextLine();
        currentVM.setVMversion(userInput);
        
        // Takes in the desired file source the user would like for the VM.
        System.out.print("Please enter a file path for the VM: ");
        userInput = input.nextLine();
        currentVM.setVMsource(userInput);
        
        // Take all changes that were applied to currentVM and copy them to newVM.
        // Add newVM to the VM List
        newVM = currentVM;
        vmList.set(vmIndex, newVM);
        
        // Show the user the results of the entered VM.
        ViewVM(vmList, hubList, vmIndex, hubIndex);
    }
    
    public static void AddNewHub(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        // Variable Declaration
        Scanner input = new Scanner(System.in );
        String userInput;
        Boolean duplicateHubName = true;
        Boolean duplicateVMname = true;
        Hub newHub = new Hub();
        Hub currentHub = new Hub();
        VM currentVM = new VM();
        
        if(hubList.isEmpty())
        {
            duplicateVMname = false;
        }
        
        if(vmList.isEmpty())
        {
            duplicateHubName = false;
        }
        
        // Add the newly created Hub to the Hub List.
        hubList.add(newHub);
        
        // Get the size of hubList and apply it to hubIndex.
        hubIndex = hubList.size() - 1;
        
        System.out.print("\nPlease enter the name of the new Hub: ");
        userInput = input.nextLine();
        
        // Checks to see if the requested name already exists in hubList.
        // If it does, keep asking until receiving a new, unique name.
        while(duplicateHubName == true || duplicateVMname == true)
        {
            // Checks to see if the requested name exists as a Hub.
            for(int i = 0; i < hubList.size(); i++)
            {
                currentHub = (Hub)hubList.get(i);
                
                if(userInput.equals(currentHub.getHubName()))
                {
                    duplicateHubName = true;
                    i = hubList.size() + 1;
                }
                else
                {
                    duplicateHubName = false;
                }
            }
            // Checks to see if the requested name exists as a VM.
            for(int i = 0; i < vmList.size(); i++)
            {
                currentVM = (VM)vmList.get(i);
                
                if(userInput.equals(currentVM.getVMname()))
                {
                    duplicateVMname = true;
                    i = vmList.size() + 1;
                }
                else
                {
                    duplicateVMname = false;
                }
            }
            if(duplicateVMname == true || duplicateHubName == true)
            {
                System.out.print("The device, " + userInput + " already exists as a VM or a Hub.");
                System.out.print("\n\nPlease enter a UNIQUE name for the new Hub: ");
                userInput = input.nextLine();
            }
        }
        
        // Add the name of the new VM object to the list.
        currentHub.setHubName(userInput);
                
        // Takes in the desired Subnet the user would like for the Hub.
        System.out.print("Please enter a Subnet for Hub: ");
        userInput = input.nextLine();
        currentHub.setHubSubnet(userInput);
        
        // Takes in the desired Netmask the user would like for the Hub.
        System.out.print("Please enter a NetMask for Hub: ");
        userInput = input.nextLine();
        currentHub.setHubNetmask(userInput);
        
        // Take all changes that were applied to currentVM and copy them to newVM.
        // Add newVM to the VM List
        newHub = currentHub;
        hubList.set(hubIndex, newHub);
        
        // Show the user the results of the entered VM.
        ViewHub(vmList, hubList, vmIndex, hubIndex);
    }
    
    public static void ViewDevice(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        Scanner input = new Scanner(System.in );
        String userInput;
        Boolean vmExists = true;
        Boolean hubExists = true;

        System.out.print("\nWhat is the EXACT name of the device you would like to view?: ");
        userInput = input.nextLine();
        
        // Checks to see if the requested device exists in vmList or hubList.
        // If it does, run the method that corresponds to that device, which returns all values of that device.
        if(vmList.isEmpty())
        {
            vmExists = false;
        }
        else
        {
            for(int i = 0; i < vmList.size(); i++)
            {
                VM currentVM = (VM)vmList.get(i);
            
                if(userInput.equals(currentVM.getVMname()))
                {
                    vmIndex = i;
                    vmExists = true;
                    i = vmList.size() + 1;
                    ViewVM(vmList, hubList, vmIndex, hubIndex);
                }
                else
                {
                    vmExists = false;
                }
            }
        }
                
        if(hubList.isEmpty())
        {
            hubExists = false;
        }
        else
        {
            for(int i = 0; i < hubList.size(); i++)
            {
                Hub currentHub = (Hub)hubList.get(i);
            
                if(userInput.equals(currentHub.getHubName()))
                {
                    hubIndex = i;
                    hubExists = true;
                    i = hubList.size() + 1;
                    ViewHub(vmList, hubList, vmIndex, hubIndex);
                }
                else
                {
                    hubExists = false;
                }
            }
        }
                
        if(vmExists == false && hubExists == false)
        {
            System.out.print("\nThe device, " + userInput + ", does not exist or has not yet been entered into the program.");
        }
    }
    
    public static void ViewVM(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        VM currentVM = (VM)vmList.get(vmIndex);
        
        System.out.print("\nVM Name: " + currentVM.getVMname());
        System.out.print("\nVM OS: " + currentVM.getVMos());
        System.out.print("\nVM Version: " + currentVM.getVMversion());
        System.out.print("\nVM Source: " + currentVM.getVMsource());
        System.out.print("\nConnection 0: " + currentVM.getVMconnect0());
        System.out.print("\neth0: " + currentVM.getVMeth0());
        System.out.print("\nConnection 1: " + currentVM.getVMconnect1());
        System.out.print("\neth1: " + currentVM.getVMeth1());
        System.out.print("\nConnection 2: " + currentVM.getVMconnect2());
        System.out.print("\neth2: " + currentVM.getVMeth2());
        System.out.print("\nConnection 3: " + currentVM.getVMconnect3());
        System.out.print("\neth3: " + currentVM.getVMeth3());
    }
    
    public static void ViewHub(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        Hub currentHub = (Hub)hubList.get(hubIndex);
        
        System.out.print("\nHub Name: " + currentHub.getHubName());
        System.out.print("\nHub Subnet: " + currentHub.getHubSubnet());
        System.out.print("\nHub Netmask: " + currentHub.getHubNetmask());
    }
    
    public static void EditDevice(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        Scanner input = new Scanner(System.in );
        String userInput;
        Boolean vmExists = true;
        Boolean hubExists = true;

        System.out.print("\nWhat is the EXACT name of the device you would like to edit?: ");
        userInput = input.nextLine();
        
        // Checks to see if the requested device exists in vmList or hubList.
        // If it does, run the method that corresponds to that device, which returns all values of that device.
        if(vmList.isEmpty())
        {
            vmExists = false;
        }
        else
        {
            for(int i = 0; i < vmList.size(); i++)
            {
                VM currentVM = (VM)vmList.get(i);
            
                if(userInput.equals(currentVM.getVMname()))
                {
                    vmIndex = i;
                    vmExists = true;
                    i = vmList.size() + 1;
                    EditVM(vmList, hubList, vmIndex, hubIndex);
                }
                else
                {
                    vmExists = false;
                }
            }
        }
                
        if(hubList.isEmpty())
        {
            hubExists = false;
        }
        else
        {
            for(int i = 0; i < hubList.size(); i++)
            {
                Hub currentHub = (Hub)hubList.get(i);
            
                if(userInput.equals(currentHub.getHubName()))
                {
                    hubIndex = i;
                    hubExists = true;
                    i = hubList.size() + 1;
                    EditHub(vmList, hubList, vmIndex, hubIndex);
                }
                else
                {
                    hubExists = false;
                }
            }
        }
                
        if(vmExists == false && hubExists == false)
        {
            System.out.print("\nThe device, " + userInput + ", does not exist or has not yet been entered into the program.");
        }
    }
    
    public static void EditVM(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        // Variable Declaration
        Scanner input = new Scanner(System.in );
        String userInput;
        Boolean duplicateVMname = true;
        Boolean duplicateHubName = true;
        VM editVM = (VM)vmList.get(vmIndex);
        VM currentVM = new VM();
        Hub currentHub = new Hub();
        
        if(vmList.isEmpty())
        {
            duplicateVMname = false;
        }
        
        if(hubList.isEmpty())
        {
            duplicateHubName = false;
        }
        
        // Resets the name of the chosen VM
        editVM.setVMname("");
        
        System.out.print("Please enter the name of the new VM: ");
        userInput = input.nextLine();
        
        // Checks to see if the requested name already exists in vmList or hubList.
        // If it does, keep asking until receiving a new, unique name.
        while(duplicateVMname == true || duplicateHubName == true)
        {
            // Check to see if the requested name exists as a VM.
            for(int i = 0; i < vmList.size(); i++)
            {
                currentVM = (VM)vmList.get(i);
                
                if(userInput.equals(currentVM.getVMname()))
                {
                    duplicateVMname = true;
                    i = vmList.size() + 1;
                }
                else
                {
                    duplicateVMname = false;
                }
            }
            // Check to see if the requested name exists as a Hub.
            for(int i = 0; i < hubList.size(); i++)
            {
                currentHub = (Hub)hubList.get(i);
                
                if(userInput.equals(currentHub.getHubName()))
                {
                    duplicateHubName = true;
                    i = hubList.size() + 1;
                }
                else
                {
                    duplicateHubName = false;
                }
            }
            if(duplicateVMname == true || duplicateHubName == true)
            {
                System.out.print("The device, " + userInput + " already exists as a VM or a Hub.");
                System.out.print("\n\nPlease enter a UNIQUE name for the new VM: ");
                userInput = input.nextLine();
            }           
        }
        
        // Add the name of the new VM object to the list.
        editVM.setVMname(userInput);
                
        // Takes in the desired OS the user would like for the VM.
        System.out.print("Please enter an OS for the VM: ");
        userInput = input.nextLine();
        editVM.setVMos(userInput);
        
        // Takes in the desired OS Version the user would like for the VM.
        System.out.print("Please enter a version for the VM: ");
        userInput = input.nextLine();
        editVM.setVMversion(userInput);
        
        // Takes in the desired file source the user would like for the VM.
        System.out.print("Please enter a file path for the VM: ");
        userInput = input.nextLine();
        editVM.setVMsource(userInput);
        
        // Take all changes that were applied to currentVM and copy them to newVM.
        // Add newVM to the VM List
        vmList.set(vmIndex, editVM);
        
        // Show the user the results of the entered VM.
    ViewVM(vmList, hubList, vmIndex, hubIndex);
    }
    
    public static void EditHub(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        // Variable Declaration
        Scanner input = new Scanner(System.in );
        String userInput;
        Boolean duplicateHubName = true;
        Boolean duplicateVMname = true;
        Hub editHub = (Hub)hubList.get(hubIndex);
        Hub currentHub = new Hub();
        VM currentVM = new VM();
        
        if(hubList.isEmpty())
        {
            duplicateVMname = false;
        }
        
        if(vmList.isEmpty())
        {
            duplicateHubName = false;
        }
        
        // Resets the name of the chosen Hub
        editHub.setHubName("");
        
        System.out.print("\nPlease enter the name of the new Hub: ");
        userInput = input.nextLine();
        
        // Checks to see if the requested name already exists in hubList.
        // If it does, keep asking until receiving a new, unique name.
        while(duplicateHubName == true || duplicateVMname == true)
        {
            // Checks to see if the requested name exists as a Hub.
            for(int i = 0; i < hubList.size(); i++)
            {
                currentHub = (Hub)hubList.get(i);
                
                if(userInput.equals(currentHub.getHubName()))
                {
                    duplicateHubName = true;
                    i = hubList.size() + 1;
                }
                else
                {
                    duplicateHubName = false;
                }
            }
            // Checks to see if the requested name exists as a VM.
            for(int i = 0; i < vmList.size(); i++)
            {
                currentVM = (VM)vmList.get(i);
                
                if(userInput.equals(currentVM.getVMname()))
                {
                    duplicateVMname = true;
                    i = vmList.size() + 1;
                }
                else
                {
                    duplicateVMname = false;
                }
            }
            if(duplicateVMname == true || duplicateHubName == true)
            {
                System.out.print("The device, " + userInput + " already exists as a VM or a Hub.");
                System.out.print("\n\nPlease enter a UNIQUE name for the new Hub: ");
                userInput = input.nextLine();
            }
        }
        
        // Add the name of the new VM object to the list.
        editHub.setHubName(userInput);
                
        // Takes in the desired Subnet the user would like for the Hub.
        System.out.print("Please enter a Subnet for Hub: ");
        userInput = input.nextLine();
        editHub.setHubSubnet(userInput);
        
        // Takes in the desired Netmask the user would like for the Hub.
        System.out.print("Please enter a NetMask for Hub: ");
        userInput = input.nextLine();
        editHub.setHubNetmask(userInput);
        
        // Take all changes that were applied to currentVM and copy them to newVM.
        // Add newVM to the VM List
        hubList.set(hubIndex, editHub);
        
        // Show the user the results of the entered VM.
        ViewHub(vmList, hubList, vmIndex, hubIndex);
    }
    
    public static void DeleteDevice(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        Scanner input = new Scanner(System.in );
        String userInput;
        Boolean vmExists = true;
        Boolean hubExists = true;
        

        System.out.print("\nWhat is the EXACT name of the device you would like to delete?: ");
        userInput = input.nextLine();
        
        // Checks to see if the requested device exists in vmList or hubList.
        // If it does, run the method that corresponds to that device, which returns all values of that device.
        if(vmList.isEmpty())
        {
            vmExists = false;
        }
        else
        {
            for(int i = 0; i < vmList.size(); i++)
            {
                VM currentVM = (VM)vmList.get(i);
            
                if(userInput.equals(currentVM.getVMname()))
                {
                    vmList.set(i, null);
                    vmList.remove(i);
                    System.out.print("VM, " + userInput + ", was successfully deleted from the Current VMs List!");
                    vmExists = true;
                    i = vmList.size() + 1;
                }
                else
                {
                    vmExists = false;
                }
            }
        }
                
        if(hubList.isEmpty())
        {
            hubExists = false;
        }
        else
        {
            for(int i = 0; i < hubList.size(); i++)
            {
                Hub currentHub = (Hub)hubList.get(i);
            
                if(userInput.equals(currentHub.getHubName()))
                {
                    hubList.set(i, null);
                    hubList.remove(i);
                    System.out.print("Hub," + userInput + ", was successfully deleted from the Current Hubs List!");
                    hubExists = true;
                    i = hubList.size() + 1;
                }
                else
                {
                    hubExists = false;
                }
            }
        }
                
        if(vmExists == false && hubExists == false)
        {
            System.out.print("\nThe device, " + userInput + ", does not exist or has not yet been entered into the program.");
        }
    }
    
    public static void ConnectDevices(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        // Variable Declaration
        Scanner input = new Scanner(System.in );
        String userInput;
        
        Boolean vmExists = true;

        System.out.print("\nWhat is the EXACT name of the VM you would like to setup for a connection?: ");
        userInput = input.nextLine();
        
        // Checks to see if the requested device exists in vmList or hubList.
        // If it does, run the method that corresponds to that device, which returns all values of that device.
        if(vmList.isEmpty())
        {
            vmExists = false;
        }
        else if(hubList.isEmpty())
        {
            System.out.print("There are currently no Hubs to connect to.");
        }
        else
        {
            for(int i = 0; i < vmList.size(); i++)
            {
                VM currentVM = (VM)vmList.get(i);
            
                if(userInput.equals(currentVM.getVMname()))
                {
                    vmIndex = i;
                    vmExists = true;
                    i = vmList.size() + 1;
                    MakeConnection(vmList, hubList, vmIndex, hubIndex);
                }
                else
                {
                    vmExists = false;
                }
            }
        }
                
        if(vmExists == false)
        {
            System.out.print("The VM, '" + userInput + "', does not exist or has not yet been entered into the program.");
        }
    }
    
    public static void MakeConnection(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        // Variable Declaration
        Scanner input = new Scanner(System.in );
        String userInput;
        String hubName = "";
        int hubsAvailable = 0;
        Boolean hubExists = false;
        VM editVM = (VM)vmList.get(vmIndex);
        Hub editHub = new Hub();
           
        // Set all VM connections to null and delete all HubINF entries for this VM.
        editVM.setVMconnect0(null);
        editVM.setVMconnect1(null);
        editVM.setVMconnect2(null);
        editVM.setVMconnect3(null);
        
        for(int j = 0; j < hubList.size(); j++)
        {
            Hub currentHub = (Hub)hubList.get(j);
            
            if(currentHub.getHubINFisEmpty() == false)
            {
                // Does currentHub's INF contain editVM's name?
                if(currentHub.getHubINF().contains(editVM.getVMname()))
                {
                    editHub = (Hub)currentHub;
                    editHub.deleteHubINF(editVM.getVMname());
                    hubList.set(j, editHub);
                }
            }
        }
        
        // Run a max of four times for the 4 maximum connections a VM can have.
        for(int i = 0; i <= 3; i++)
        {
            // Check to see how many Hubs are available that have not already been connected to.
            for(int j = 0; j < hubList.size(); j++)
            {
                Hub currentHub = (Hub)hubList.get(j);
                if( currentHub.getHubName().equals(editVM.getVMconnect0()) ||
                    currentHub.getHubName().equals(editVM.getVMconnect1()) ||
                    currentHub.getHubName().equals(editVM.getVMconnect2()) ||
                    currentHub.getHubName().equals(editVM.getVMconnect3())    )
                {
                    // If this VM is already connected to a Hub in the list, skip it.
                }
                else
                {
                    hubsAvailable++;
                }
            }
            
            // Runs only if there are available hubs in the list to connect to.
            if(hubsAvailable > 0)
            {
                // Print out current Hubs in the hubList.
                System.out.print("\nCurrent Hubs: ");
                for(int j = 0; j < hubList.size(); j++)
                {
                    Hub currentHub = (Hub)hubList.get(j);
                    
                    if( currentHub.getHubName().equals(editVM.getVMconnect0()) ||
                        currentHub.getHubName().equals(editVM.getVMconnect1()) ||
                        currentHub.getHubName().equals(editVM.getVMconnect2()) ||
                        currentHub.getHubName().equals(editVM.getVMconnect3())    )
                    {
                    // If this VM is already connected to a Hub in the list, skip it.
                    }
                    else
                    {
                        System.out.print(currentHub.getHubName() + ", ");
                    }
                }
                
                System.out.print("\nWhat is the EXACT name of the Hub you would like to establish a connection to '" + editVM.getVMname() + "'?: ");
                userInput = input.nextLine();
                
                while(hubExists == false)
                {
                    for(int j = 0; j < hubList.size(); j++)
                    {
                        Hub currentHub = (Hub)hubList.get(j);
        
                        if(userInput.equals(currentHub.getHubName()))
                        {
                            if( userInput.equals(editVM.getVMconnect0()) ||
                                userInput.equals(editVM.getVMconnect1()) ||
                                userInput.equals(editVM.getVMconnect2()) ||
                                userInput.equals(editVM.getVMconnect3())    )
                            {
                                hubExists = false;
                            }
                            else
                            {
                               hubExists = true;
                               hubName = userInput;
                               j = hubList.size() + 1; 
                            }
                        }
                        else
                        {
                            hubExists = false;
                        }
                    }
                    
                    if(hubExists == false)
                    {
                        System.out.print("The Hub, '" + userInput + "', does not exist or has not yet been entered into the program.");
                        System.out.print("\n\nPlease enter the EXACT name of the Hub you would like to establish a connection to '" + editVM.getVMname() + "': ");
                        userInput = input.nextLine();
                    }
                }
                
                // Connect the selected Hub to the current VM.
                switch(i)
                {
                    case 0:
                        editVM.setVMconnect0(userInput);
                        
                        System.out.print("What is the IP Address of eth0 that is connected to '" + userInput + "'?: ");
                        userInput = input.nextLine();
                        editVM.setVMeth0(userInput);
                        break;
                    case 1:
                        editVM.setVMconnect1(userInput);
                        
                        System.out.print("What is the IP Address of eth1 that is connected to '" + userInput + "'?: ");
                        userInput = input.nextLine();
                        editVM.setVMeth1(userInput);
                        break;
                    case 2:
                        editVM.setVMconnect2(userInput);
                        
                        System.out.print("What is the IP Address of eth2 that is connected to '" + userInput + "'?: ");
                        userInput = input.nextLine();
                        editVM.setVMeth2(userInput);
                        break;
                    case 3:
                        editVM.setVMconnect3(userInput);
                        
                        System.out.print("What is the IP Address of eth3 that is connected to '" + userInput + "'?: ");
                        userInput = input.nextLine();
                        editVM.setVMeth3(userInput);
                        break;
                }
                
                // Writes the name of the VM and the VM's eth# port to the HubINF List.
                for(int j = 0; j < hubList.size(); j++)
                {
                    Hub currentHub = (Hub)hubList.get(j);
                    if(hubName.equals(currentHub.getHubName()))
                    {
                        editHub = (Hub)currentHub;
                        editHub.setHubINF(editVM.getVMname() + ".eth" + i);
                        hubIndex = j;
                        j = hubList.size() + 1;
                    }
                }
                hubList.set(hubIndex, editHub);

                
                if(i < 3)
                {
                    // Run through the connection process again for another VM or stop connecting devices?
                    System.out.print("\nWould you like to connect another Hub to '" + editVM.getVMname() +"'?: ");
                    userInput = input.nextLine();
                
                    if(userInput.equals("y") || userInput.equals("Y"))
                    {
                        hubsAvailable = 0;
                        hubExists = false;
                    }
                    else
                    {
                        i = 4;
                    }
                }
            }
            else
            {
                i = 4;
                System.out.print("There are no more available Hubs to connect to.\n");
            }
        }
        
        vmList.set(vmIndex, editVM);
        ViewVM(vmList, hubList, vmIndex, hubIndex);
    }
    
    public static void DeleteNetwork(List vmList, List hubList, int vmIndex, int hubIndex)
    {
        // Variable Declaration
        Scanner input = new Scanner(System.in );
        String userInput;
        VM currentVM = new VM();
        Hub currentHub = new Hub();
        
        System.out.print("\nAre you sure you would like to delete the entire network configuration?");
        System.out.print("\nThis will permanently delete all VMs, Hubs, and Network Configurations!: ");

        userInput = input.next();
        
        if(userInput.equals("y") || userInput.equals("Y"))
        {
            // Set all VM objects to NULL so they are removed from memory.
            for(int i = 0; i < vmList.size(); i++)
            {
                vmList.set(i, null);
            }    
            vmList.clear();
            vmIndex = -1;
            
            // Set all Hub objects to NULL so they are removed from memory.
            for(int i = 0; i < hubList.size(); i++)
            {
                hubList.set(i, null);
            }   
            hubList.clear();
            hubIndex= -1;
            
            System.out.print("\nThe Network Configuration was deleted!");
        }
        else
        {
            System.out.print("\nDeleting the Network Configuration was cancelled!");
        }
    }
    
    public static void SaveConfigFile(List vmList, List hubList, int vmIndex, int hubIndex) throws IOException
    {
        // Variable Declaration
        Scanner input = new Scanner(System. in);
        String userChoice;
                        
        // Allows the user to name the output file.
        System.out.print("\nWhat would you like to name the new outputted config file (Don't include a file extension)?: ");
        userChoice = input.nextLine();
        File savingConfigFile = new File(userChoice + ".cfg");
        PrintWriter output = new PrintWriter(savingConfigFile);
        
        // Write the contents of each VM
        for(int i = 0; i < vmList.size(); i++)
        {
            VM currentVM = (VM)vmList.get(i);
            output.print("vm " + currentVM.getVMname() + " {\n");
            output.print("\tos: " + currentVM.getVMos() + "\n");
            output.print("\tver: \"" + currentVM.getVMversion() + "\"\n");
            output.print("\tsrc: \"" + currentVM.getVMsource() + "\"\n");
            
            if(currentVM.getVMconnect0() != null)
            {
                output.print("\teth0: \"" + currentVM.getVMeth0() + "\"\n");
            }
            if(currentVM.getVMconnect1() != null)
            {
                output.print("\teth1: \"" + currentVM.getVMeth1() + "\"\n");
            }
            if(currentVM.getVMconnect2() != null)
            {
                output.print("\teth2: \"" + currentVM.getVMeth2() + "\"\n");
            }
            if(currentVM.getVMconnect3() != null)
            {
                output.print("\teth3: \"" + currentVM.getVMeth3() + "\"\n");
            }
            
            output.print("}\n\n");
        }
        
        // Write the contents of each Hub
        for(int i = 0; i < hubList.size(); i++)
        {
            Hub currentHub = (Hub)hubList.get(i);
            output.print("hub " + currentHub.getHubName() + " {\n");
            output.print("\tinf: " + currentHub.getHubINF() + "\n");
            output.print("\tsubnet: \"" + currentHub.getHubSubnet() + "\"\n");
            output.print("\tnetmask: \"" + currentHub.getHubNetmask() + "\"\n");
            output.print("}\n\n");
        }
        
        // Write the contents of the Partial Solution
        output.print("partial_solution {\n");
        for(int i = 0; i < hubList.size(); i++)
        {
            Hub currentHub = (Hub)hubList.get(i);
        }
        output.print("}\n");
        
        output.close();
        System.out.print("\nConfig File saved successfully!");
    }
    
    

}
